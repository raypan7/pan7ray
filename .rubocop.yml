require:
  - rubocop-rails
  - rubocop-performance

AllCops:
  EnabledByDefault: true
  Exclude:
    # route file is DSL
    - 'config/routes.rb'
    - 'config/deploy.rb'
    - 'db/schema.rb'
  TargetRubyVersion: 2.6
  TargetRailsVersion: 5.2

# This is not enabled by default because it would mark a lot of offenses unnecessarily.
Lint/ConstantResolution:
  Enabled: false

Style/GlobalVars:
  AllowedVariables:
    - $redis_lua_hash

Style/Copyright:
  Enabled: false
  AutocorrectNotice: ""

Style/ConstantVisibility:
  Enabled: false

Style/MissingElse:
  Enabled: false

Style/InlineComment:
  Enabled: false

Style/FrozenStringLiteralComment:
  Exclude:
    - 'db/migrate/*.rb'

Rails:
  Enabled: true

Rails/UnknownEnv:
  Environments:
    - production
    - staging
    - development
    - test

# modern editors and terminal fit more than 80 characters.
Layout/LineLength:
  Max: 120
  Exclude:
  - 'app/models/key_values.rb'
  - 'app/models/key_values/**/*.rb'

# Class length is not critical to code quality
Metrics/ClassLength:
  Enabled: false

# Block length is ok to be long in DSLs like 'rspec' or 'rake'
Metrics/BlockLength:
  Enabled: false

# defualt '10 line' is too strict to us, and may clutter the class
Metrics/MethodLength:
  Max: 40
  Exclude:
  - 'app/services/quo/pdf/**.rb'
Metrics/AbcSize:
  Max: 20
  Exclude:
  - 'app/services/quo/pdf/**.rb'
  - 'app/features/**/factory.rb'


# Most Rails generated class are not doced, and not needed
Style/Documentation:
  Enabled: false

Style/DocumentationMethod:
  Enabled: false

# 'return' makes code more readable in some cases
Style/RedundantReturn:
  Enabled: false

# Taiwan Greate again
Style/AsciiComments:
  Enabled: false

# Guard is not always good to readablity
# Note: It does not mean we don't use guard to reduce block levels
# In short methods, using guard is not necessary, e.g.
#   def foo(x)   | def foo(x)
#     if xxx?(x) |   return unless xxx?(x)
#       bar(x)   |   bar(x)
#     end        | end
#   end          |
Style/GuardClause:
  Enabled: false

# In short blocks, using next is not necessary, e.g.
# bars.each do |b|   | bars.each do |b|
#   do_a             |   do_a
#   do_b if b.good?  |   next unless b.good?
# end                |
#                    |   do_b
#                    | end
Style/Next:
  Enabled: false

# The rule expects
#
#   if xxxxxx
#     a_very_long_method_or_somethings_like_that......
#   end
#
# to be
#
#   a_very_long_method_or_somethings_like_that...... if xxxxxx
#
# It is not good looking at all.
Style/IfUnlessModifier:
  Enabled: false

# The rule expects
#
#   class Admin::MyController
#   end
#
# to be
#
#   module Admin
#     class MyController
#     end
#   end
#
# It seems not suitable for our project
Style/ClassAndModuleChildren:
  Enabled: false

# # bad
# a = [1, 2,]
#
# # good
# a = [
#   1, 2,
#   3,
# ]
#
# # good
# a = [
#   1,
#   2,
# ]
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma

# # good
# foo(
#   1,
#   2,
# )
Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: consistent_comma

# # good
# a = {
#   1,
#   2,
# }
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma

# ---- Disable some cop for key values ----
Layout/ExtraSpacing:
  Exclude:
    - 'app/models/key_values.rb'
    - 'app/models/key_values/**/*.rb'
Layout/SpaceBeforeComma:
  Exclude:
    - 'app/models/key_values.rb'
    - 'app/models/key_values/**/*.rb'
Layout/SpaceInsideHashLiteralBraces:
  Exclude:
    - 'app/models/key_values.rb'
    - 'app/models/key_values/**/*.rb'
# ---- End of Disable some cop for key values ----

# ---- Rubocop Rails only support Rails >= 4.0,
#      some features have to disable for Rails 3 ----

# record.update(xxx: ooo)
Rails/ActiveRecordAliases:
  Enabled: false

# X.find_by(xxx: ooo)
Rails/DynamicFindBy:
  Enabled: false

Lint/NumberConversion:
  Enabled: false
